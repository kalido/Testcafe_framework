'use strict';

var fs = require('fs');

var runId = null;
var result = null;

module.exports = {

    createDirectoryIfNotExist: function createDirectoryIfNotExist(Directory) {
        if (!fs.existsSync(Directory)) {
            var dirName = '';
            var filePathSplit = Directory.split('/');
            for (var index = 0; index < filePathSplit.length; index++) {
                dirName += filePathSplit[index] + '/';
                if (!fs.existsSync(dirName)) fs.mkdirSync(dirName);
            }
        }
    },

    convertoSec: function convertoSec(testTime) {
        var times = testTime.trim().split(' ');
        var totalSecs = 0;
        times.forEach(function (timeFramgement) {
            if (timeFramgement.includes('m')) {
                totalSecs += parseInt(timeFramgement.replace('m', ''), 10) * 60;
            }
            if (timeFramgement.includes('s')) {
                totalSecs += parseInt(timeFramgement.replace('s', ''), 10);
            }
        });
        return totalSecs;
    },

    saveContentToFile: function saveContentToFile(ctx, filePath, content) {
        var isError = false;
        fs.writeFile(filePath, content, function (err) {
            if (err) {
                isError = true;
                ctx.newline().write(ctx.chalk.red('Error on saving file ' + err));
                return console.log(err);
            }
        });
        if (!isError && String(filePath).includes('.html')) {
            ctx.write(ctx.chalk.green('The file was saved at')).write(ctx.chalk.yellow(filePath));
        }
    },

    addPlanEntry: function addPlanEntry(ctx, api, rundetails, resultsTestcases) {
        api.addPlanEntry(ctx.PlanID, rundetails, function (err, run) {
            var data = JSON.parse(run.body);

            if (err !== 'null') {
                runId = data.runs[0].id;
                ctx.newline().write('------------------------------------------------------').newline().write(ctx.chalk.green('Run added successfully.')).newline().write(ctx.chalk.blue.bold('Run name   ')).write(ctx.chalk.yellow(rundetails.name));

                result = {
                    results: resultsTestcases
                };

                api.addResultsForCases(runId, result, function (err1, results) {
                    if (err1 === 'null') {
                        ctx.newline().write(ctx.chalk.blue('---------Error at Add result -----')).newline().write(err1);
                    } else if (results.length == 0) {
                        ctx.newline().write(ctx.chalk.red('No Data has been published to Testrail.')).newline().write(err1);
                    } else {
                        ctx.newline().write('------------------------------------------------------').newline().write(ctx.chalk.green('Result added to the testrail successfully.'));
                    }
                });
            } else {
                ctx.newline().write(ctx.chalk.blue('-------------Error at AddPlanEntry ----------------')).newline().write(err);
            }
        });
    },

    getProject: function getProject(ctx, api) {

        return api.getProjects({}).then(function (project) {
            var projectID = 0;
            if (typeof project !== 'undefined') {
                project.body.forEach(function (project) {
                    if (String(project.name) === String(ctx.ProjectName)) {
                        ctx.newline().write(ctx.chalk.blue.bold('Project name(id) ')).write(ctx.chalk.yellow(ctx.ProjectName + '(' + project.id + ')'));
                        projectID = project.id;
                    }
                });
            } else {
                ctx.newline().write(ctx.chalk.blue('project is undefined')).newline();
                projectID = 0;
            }

            return projectID;
        })['catch'](function (err) {
            ctx.newline().write(ctx.chalk.blue('-------------Error at Get Projects  ----------------')).write(err).newline();
            return 0;
        });
    },

    getPlanID: function getPlanID(ctx, api) {
        var _this = this;

        return api.getPlans(ctx.ProjectID).then(function callee$1$0(result) {
            var planid, plan, planFound, index;
            return regeneratorRuntime.async(function callee$1$0$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        planid = result;
                        plan = result.body;
                        planFound = false;
                        context$2$0.t0 = regeneratorRuntime.keys(plan);

                    case 4:
                        if ((context$2$0.t1 = context$2$0.t0()).done) {
                            context$2$0.next = 13;
                            break;
                        }

                        index = context$2$0.t1.value;

                        if (!(plan[index].name === ctx.PlanName)) {
                            context$2$0.next = 11;
                            break;
                        }

                        ctx.newline().write(ctx.chalk.blue.bold('Plan name(id) ')).write(ctx.chalk.yellow(plan[index].name + '(' + plan[index].id + ')'));
                        planid = plan[index].id;
                        planFound = true;
                        return context$2$0.abrupt('break', 13);

                    case 11:
                        context$2$0.next = 4;
                        break;

                    case 13:
                        if (!(!planFound || planid === '')) {
                            context$2$0.next = 17;
                            break;
                        }

                        context$2$0.next = 16;
                        return regeneratorRuntime.awrap(ctx.addNewPlan(api));

                    case 16:
                        planid = context$2$0.sent;

                    case 17:
                        return context$2$0.abrupt('return', planid);

                    case 18:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, _this);
        })['catch'](function (error) {
            console.log('in error');
            ctx.newline().write(ctx.chalk.blue('-------------Error at Get Plans  ----------------')).newline();
            console.log(error);
            return 0;
        });
    },

    addNewPlan: function addNewPlan(ctx, api) {
        return api.addPlan(ctx.ProjectID, { name: ctx.PlanName, desription: 'Added From Automation reporter plugin' }).then(function (plan) {
            var splanID = 0;
            if (typeof plan.body.id === 'undefined') {
                ctx.newline().write(ctx.chalk.red('Plan Id found as undefined'));
                splanID = 0;
            } else {
                ctx.newline().write(ctx.chalk.green('New plan created.')).newline().write(ctx.chalk.blue.bold('Plan name(id) ')).write(ctx.chalk.yellow(plan.body.name + '(' + plan.body.id + ')'));
                splanID = plan.body.id;
            }
            return splanID;
        })['catch'](function (error) {
            ctx.newline().write(ctx.chalk.blue('-------------Error at Add New Plan  ----------------')).newline();
            console.log(error);

            return 0;
        });
    },

    getSuiteID: function getSuiteID(ctx, api) {
        return api.getSuites(ctx.ProjectID).then(function (suites) {
            var id = 0;
            var suite = suites.body;
            var suiteName;

            if (suites.length === 0) {
                ctx.newline().write(ctx.chalk.red('The project doesnt contain any suite'));
                id = 0;
            } else {
                if (ctx.SuiteName !== null) {
                    for (var index in suite) {
                        if (String(suite[index].name).trim().toUpperCase() === String(ctx.SuiteName).trim().toUpperCase()) {
                            suiteName = suite[index].name;
                            id = suite[index].id;
                            break;
                        }
                    }
                }

                ctx.newline().write(ctx.chalk.blue.bold('Suite name(id) ')).write(ctx.chalk.yellow(suiteName + '(' + id + ')'));
            }
            return id;
        })['catch'](function (error) {
            ctx.newline().write(ctx.chalk.blue('-------------Error at Get Suites  ----------------')).newline();
            console.log(error);
            return 0;
        });
    }
};