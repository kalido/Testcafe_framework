'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var utils = require('./utils');
var TestRail = require('./testRailApi');

exports['default'] = function () {
    return {
        noColors: false,
        startTime: null,
        afterErrList: false,
        currentFixtureName: null,
        testCount: 0,
        skipped: 0,
        output: '',
        testResult: [],
        agents: '',
        passed: '',
        failed: '',
        testStartTime: '',
        testEndTime: '',
        totalTaskTime: '',
        errorTestData: [],
        creationDate: '',
        PlanName: '',
        PlanID: 0,
        SuiteID: 0,
        SuiteName: '',
        EnableTestrail: false,
        ProjectID: 0,
        ProjectName: '',
        RunName: '',
        TestrailUser: null,
        TestrailPass: null,
        TestrailHost: null,
        ConfigID: [],
        OpenBugData: [],
        PassCount: 0,
        FailCount: 0,
        SkipCount: 0,
        OpenCount: 0,
        slowTestsCount: 0,
        FailureTestCases: [],
        KnownFailureCount: 0,
        // for XML
        report_XML: '',
        startTime_XML: null,
        uaList_XML: null,
        currentFixtureName_XML: null,
        testCount_XML: 0,
        skipped_XML: 0,

        reportTaskStart: function reportTaskStart(startTime, userAgents, testCount) {
            return regeneratorRuntime.async(function reportTaskStart$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        try {

                            this.startTime = new Date(); // set first test start time
                            this.testCount = testCount;

                            // for xml report
                            this.startTime_XML = startTime;
                            this.uaList_XML = userAgents.join(', ');
                            this.testCount_XML = testCount;
                            // end xml report

                            this.setIndent(2).useWordWrap(true).write('--------------------------------------------------------------------').newline().write('|        Running tests in:').write(this.chalk.blue(userAgents)).write('|').newline().write('--------------------------------------------------------------------').newline();
                            this.agents = userAgents;
                            this.testStartTime = new Date();
                            this.ProjectName = process.env.PROJECT_NAME;
                            this.EnableTestrail = String(process.env.TESTRAIL_ENABLE || '').trim().toLowerCase() === 'true';
                            this.TestrailHost = process.env.TESTRAIL_HOST;
                            this.TestrailPass = process.env.TESTRAIL_PASS;
                            this.TestrailUser = process.env.TESTRAIL_USER;
                            this.SuiteName = process.env.SUITE_NAME || null;
                            this.RunName = process.env.RUN_NAME;

                            if (this.EnableTestrail) {
                                this.setIndent(2).useWordWrap(true).write('--------------------------------------------------------------------').newline().write(this.chalk.red('Please use 2.0.6 version of testcafe-reporter-html-testrail for publishing report to Testrail')).newline().write('--------------------------------------------------------------------').newline();

                                if (!this.ProjectName || !this.TestrailHost || !this.TestrailPass || !this.TestrailUser) {
                                    this.newline().write(this.chalk.red.bold('Error:  TESTRAIL_HOST, TESTRAIL_USER, TESTRAIL_PASS and PROJECT_NAME must be set as environment variables for the reporter plugin to push the result to the Testrail'));
                                    process.exit(1);
                                }
                            }

                            this.PlanName = process.env.PLAN_NAME || 'TestAutomation_1';
                        } catch (error) {
                            console.log(error);
                        }

                    case 1:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        },

        reportFixtureStart: function reportFixtureStart(name) {

            this.currentFixtureName = name;
            //for xml report
            this.currentFixtureName_XML = this.escapeHtml(name);
        },

        reportTestDone: function reportTestDone(name, testRunInfo) {
            var _this = this;

            this.testEndTime = new Date(); // set test end time
            var hasErr = testRunInfo.errs.length;
            var testOutput = {};

            this.testStartTime = new Date(); // set net test start time
            var testStatus = '';

            var namef = this.currentFixtureName + ' - ' + name;

            /* #region evaluting Test status */

            if (testRunInfo.skipped) testStatus = 'Skipped';else if (hasErr === 0) testStatus = 'Passed';else testStatus = 'Failed';
            /* #endregion */

            /* #region Console output */
            var result = null;
            if (testStatus === 'Passed') {
                result = this.chalk.green(testStatus);
                this.PassCount += 1;
                this.reportTestDone_XML(name, testRunInfo, false);
            } else if (testStatus === 'Skipped') {
                result = this.chalk.gray(testStatus);
                this.SkipCount += 1;
                this.reportTestDone_XML(name, testRunInfo, false);
            } else if (testStatus === 'Failed') {
                result = this.chalk.red(testStatus);
                this.FailureTestCases.push(result + ' > ' + namef);
                this.FailCount += 1;
                this.reportTestDone_XML(name, testRunInfo);
            } else {
                result = this.chalk.magenta(testStatus);
                this.OpenBugFailureTestCases.push(result + ' > ' + namef);
                this.OpenCount += 1;
                this.reportTestDone_XML(name, testRunInfo, false);
            }

            var title = result + ' > ' + namef;

            this.write(title).newline();
            /* #endregion */

            testOutput[0] = this.currentFixtureName;
            testOutput[1] = name;
            testOutput[2] = testStatus;
            testOutput[3] = this.moment.duration(testRunInfo.durationMs).format('h[h] mm[m] ss[s]');
            var error = {};

            if (testRunInfo.skipped) this.skipped++;

            if (hasErr > 0) {
                error[0] = this.currentFixtureName;
                error[1] = name;
                error[2] = '';
                testOutput[4] = '';
                this._renderErrors(testRunInfo.errs);

                testRunInfo.errs.forEach(function (err, idx) {

                    error[2] += _this.formatError(err, idx + 1 + ') ').replace(/(?:\r\n|\r|\n)/g, '<br />').replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
                    testOutput[4] += _this.formatError(err, idx + 1 + ') ').replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
                });

                this.errorTestData.push(error);
            }

            this.testResult.push(testOutput);
        },

        reportTaskDone: function reportTaskDone(endTime, passed, warnings) {
            var durationMs = endTime - this.startTime;

            var durationStr = this.moment.duration(durationMs).format('h[h] mm[m] ss[s]');

            this.totalTaskTime = durationStr;
            var footer = '';

            if (warnings.length > 0) console.log(warnings);
            if (this.FailureTestCases.length > 0) {

                footer += '\n------------------------- Failed Tests -------------------------\n';

                this.FailureTestCases.forEach(function (test) {
                    footer += test + '\n';
                });

                footer += '----------------------------------------------------------------\n';
            }
            footer += '\n----------------------------------------------------------------\nTotal Tests: ' + this.testCount + '\nTotal Passed: ' + this.PassCount + '\nTotal Failed: ' + this.FailCount + '\nTotal Skipped: ' + this.SkipCount + '\n\nTotal Failed due to Known Test Failures: ' + this.KnownFailureCount + '\nTotal Failed due to Open Application Bugs: ' + this.OpenCount + '\n(Duration: ' + durationStr + ')\n----------------------------------------------------------------\n        ';

            this.passed = passed;
            this.failed = this.testCount - passed;

            this.write(footer).newline();

            var d = new Date();

            this.creationDate = d.getDate() + '_' + (d.getMonth() + 1) + '_' + d.getFullYear() + '_' + d.getHours() + '_' + d.getMinutes() + '_' + d.getSeconds();

            var reportName = 'Report_' + this.creationDate;
            this.generateHTMLReport(reportName);
            this.generateXMLReport(endTime, reportName, this.FailureTestCases.length);

            if (this.EnableTestrail) {
                this.publishResultToTestrail();
            }
        },

        _renderErrors: function _renderErrors(errs) {
            var _this2 = this;

            this.setIndent(3).newline();

            errs.forEach(function (err, idx) {
                var prefix = _this2.chalk.red(idx + 1 + ') ');

                _this2.newline().write(_this2.formatError(err, prefix)).newline().newline();
            });
        },

        publishResultToTestrail: function publishResultToTestrail() {
            var resultsTestcases, caseidList, index, testDesc, caseID, _status, comment, Testresult, api, AgentDetails, rundetails;

            return regeneratorRuntime.async(function publishResultToTestrail$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        resultsTestcases = [];
                        caseidList = [];

                        this.newline().write('------------------------------------------------------').newline().write(this.chalk.green('Publishing the result to testrail...'));

                        context$2$0.t0 = regeneratorRuntime.keys(this.testResult);

                    case 4:
                        if ((context$2$0.t1 = context$2$0.t0()).done) {
                            context$2$0.next = 26;
                            break;
                        }

                        index = context$2$0.t1.value;
                        testDesc = this.testResult[index][1].split('\|');
                        caseID = null;

                        if (!(typeof testDesc[2] === 'undefined')) {
                            context$2$0.next = 11;
                            break;
                        }

                        // verify that Case_ID  of test is present or not
                        this.newline().write(this.chalk.red.bold(this.symbols.err)).write('Warning:  Test: ' + this.testResult[index][1] + ' missing the Testrail ID');
                        return context$2$0.abrupt('continue', 4);

                    case 11:

                        caseID = String(testDesc[2]).toUpperCase().replace('C', ''); // remove the prefix C from CaseID

                        //to check that caseID is valid ID using isnumber function

                        if (!isNaN(caseID)) {
                            context$2$0.next = 15;
                            break;
                        }

                        this.newline().write(this.chalk.red.bold(this.symbols.err)).write('Warning:  Test: ' + this.testResult[index][1] + ' contains invalid Test rail Case id');
                        return context$2$0.abrupt('continue', 4);

                    case 15:
                        _status = this.testResult[index][2];
                        comment = null;

                        if (_status === 'Skipped') {
                            _status = 6;
                            comment = 'Test Skipped';
                        } else if (_status === 'Passed') {
                            _status = 1;
                            comment = 'Test passed';
                        } else {
                            _status = 5;
                            comment = this.testResult[index][4]; // if error found for the Test, It will populated in the comment
                        }

                        Testresult = {};

                        Testresult['case_id'] = caseID.trim();
                        Testresult['status_id'] = _status;
                        Testresult['comment'] = comment;
                        resultsTestcases.push(Testresult);
                        caseidList.push(caseID.trim());
                        context$2$0.next = 4;
                        break;

                    case 26:
                        if (!(caseidList.length == 0)) {
                            context$2$0.next = 29;
                            break;
                        }

                        this.newline().write(this.chalk.red.bold(this.symbols.err)).write('No test case data found to publish');
                        return context$2$0.abrupt('return');

                    case 29:
                        api = new TestRail.TestRailAPI({
                            host: this.TestrailHost,
                            user: this.TestrailUser,
                            password: this.TestrailPass
                        });
                        context$2$0.next = 32;
                        return regeneratorRuntime.awrap(utils.getProject(this, api));

                    case 32:
                        this.ProjectID = context$2$0.sent;

                        if (!(String(this.ProjectID) === '0')) {
                            context$2$0.next = 35;
                            break;
                        }

                        return context$2$0.abrupt('return');

                    case 35:
                        context$2$0.next = 37;
                        return regeneratorRuntime.awrap(utils.getPlanID(this, api));

                    case 37:
                        this.PlanID = context$2$0.sent;

                        if (!(String(this.PlanID) === '0')) {
                            context$2$0.next = 40;
                            break;
                        }

                        return context$2$0.abrupt('return');

                    case 40:
                        context$2$0.next = 42;
                        return regeneratorRuntime.awrap(utils.getSuiteID(this, api));

                    case 42:
                        this.SuiteID = context$2$0.sent;

                        if (!(this.SuiteID === 0)) {
                            context$2$0.next = 45;
                            break;
                        }

                        return context$2$0.abrupt('return');

                    case 45:
                        AgentDetails = this.agents[0].split('/');
                        rundetails = {
                            'suite_id': this.SuiteID,
                            'include_all': false,
                            'case_ids': caseidList,
                            'name': this.RunName ? this.RunName + AgentDetails[0] : 'Run_' + this.creationDate + '(' + AgentDetails[0] + '_' + AgentDetails[1] + ')'

                        };

                        utils.addPlanEntry(this, api, rundetails, resultsTestcases);

                    case 48:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        },

        generateHTMLReport: function generateHTMLReport(reportName) {

            this.output += '<!DOCTYPE html>\n\t\t\t\t\t\t\t<html>\n                            <head>\n                            <title>TestCafe HTML Report</title>\n                            <script src=\'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js\'></script>\n                            <meta name=\'viewport\' content=\'width=device-width, initial-scale=1\'>\n                            <link rel=\'stylesheet\' href=\'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\'>\n                            <script src=\'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\'></script>\n                            <script>\n                            var config = {             type: \'pie\',             data: {                 datasets: [{                     data: [                         \'' + this.PassCount + '\',\'' + this.FailCount + '\'                     ],                     backgroundColor: [                         \'Green\',                         \'Red\'                     ]                 }],                 labels: [                     \'Pass\',                     \'Failed\'                 ]             },             options: {                 responsive: true             }         };          window.onload = function() {             var ctx = document.getElementById(\'myChart\').getContext(\'2d\');             window.myPie = new Chart(ctx, config);         };\n                            </script>\n                            </head>\n                            <body>\n                            <div class=\'container-fluid\'>\n                                <div class="row">\n                            <div class="col-sm-8">\n                                  <div>\n                                  <canvas id=\'myChart\' height=\'80\' ></canvas>\n                                  </div>\n                            </div>\n                            <div class="col-sm-2" style=" padding-top:80px">\n                                <table class=\'table table-bordered\' >\n                                <tr>\n                                    <td><b>Passed</b></td>\n                                    <td> ' + this.PassCount + ' </td>\n                                </tr>\n                                <tr>\n                                    <td> <b>Failed </b></td>\n                                    <td> ' + this.FailCount + ' </td>\n                                </tr>\n                                <tr>\n                                    <td> <b>Skipped </b></td>\n                                    <td> ' + this.SkipCount + ' </td>\n                                </tr>';

            this.output += '<tr class=\'info\'>\n                                    <td> <b>Total </b></td>\n                                    <td> ' + (this.PassCount + this.FailCount + this.skipped) + ' </td>\n                                </tr>\n                                </table>\n                            </div>\n                          </div>\n                            <hr/>\n\n\n                            <h4>Running tests in: <b>' + this.agents + '</b>                      <span> Total Time: ' + this.totalTaskTime + '</span></h4>\n                            <hr/><br/>\n                                <h3 style=\'font-color:red\'> Test details</h3>\n                                <hr />';

            var InitialTable = '  <table class=\'table table-bordered table-hover\'>\n                        <thead>\n                        <tr>\n                            <th> Fixture Name </th>\n                            <th> Test Name </th>\n                            <th> Status </th>\n                            <th> Time </th>\n                        </tr> </thead><tbody>';

            var FailedList = '<h4> Failed Tests </h4>' + InitialTable;
            var PassedList = '<h4> Passed Tests </h4>' + InitialTable;
            var SkippedList = '<h4> Skipped Tests </h4>' + InitialTable;
            var SlowtestsList = '<h4> Slowest Tests (> 4 mins) </h4>' + InitialTable;

            for (var index in this.testResult) {
                var status = this.testResult[index][2];
                var testOutput = '';
                if (status === 'Skipped') status = '<td style=\'background-color:gray\' >Skipped</td>';else if (status === 'Passed') status = '<td style=\'background-color:green\' >Passed</td>';else if (status === 'Failed') status = '<td style=\'background-color:red\' >Failed</td>';else status = '<td style=\'background-color:magenta\' >Failed</td>';

                testOutput = '<tr>\n                                <td>' + this.testResult[index][0] + '</td>\n                                <td>' + this.testResult[index][1] + '</td>\n                                ' + status + '\n                                <td style=\'padding-right:0px;border-right:0px;\'>' + this.testResult[index][3] + '</td>\n                            </tr>';

                status = this.testResult[index][2];
                var testExecutionTime = utils.convertoSec(this.testResult[index][3]); //this.moment.duration(this.moment(this.testResult[index][3], 'mm[m] ss[s]')).asSeconds();

                //if (this.IsAdvancedReporter) {
                if (status === 'Skipped') SkippedList += testOutput;else if (status === 'Passed') PassedList += testOutput;else FailedList += testOutput;

                if (testExecutionTime >= 240) {
                    this.slowTestsCount += 1;
                    SlowtestsList += testOutput;
                }
            }

            var CompleteTable = '</tbody></table><hr />';
            FailedList += CompleteTable;
            PassedList += CompleteTable;
            SkippedList += CompleteTable;
            SlowtestsList += CompleteTable;

            if (this.FailCount > 0) {
                this.output += FailedList;
            }
            if (this.PassCount > 0) {
                this.output += PassedList;
            }
            if (this.SkipCount > 0) {
                this.output += SkippedList;
            }
            if (this.slowTestsCount > 0) {
                this.output += SlowtestsList;
            }

            if (this.errorTestData.length > 0) {
                this.output += '<h3 style=\'font-color:red\'> Error details</h3><br /><table class=\'table table-bordered table-hover\'><thead>\n                                <tr>\n                                    <th> Fixture Name </th>\n                                    <th> Test Name </th>\n                                    <th> Error </th>\n                                </tr></thead><tbody>';
            }

            for (var i in this.errorTestData) {
                var testRailIndex = String(this.errorTestData[i][1]).split('\|').length - 1;
                this.output += '<tr id=\'' + String(this.errorTestData[i][1]).split('\|')[testRailIndex].trim() + '\'>\n                                <td>' + this.errorTestData[i][0] + '</td>\n                                <td>' + this.errorTestData[i][1] + '</td>\n                                <td>' + this.errorTestData[i][2] + '</td>\n                                </tr>';
            }
            this.output += '</tbody></table></body></html>';
            this._createHTMLReportFile(this.output, reportName);
        },

        _createHTMLReportFile: function _createHTMLReportFile(htmlContent, htmlFileName) {

            var htmlReportDirectory = process.env.HTML_REPORT_PATH || __dirname + '../../../../test-reports';

            // Create html report directory if not exist
            utils.createDirectoryIfNotExist(htmlReportDirectory);

            // appending html extension
            htmlFileName = htmlFileName + '.html'; //`Report_${this.creationDate}.html`;

            if (typeof process.env.HTML_REPORT_NAME !== 'undefined') {
                htmlFileName = process.env.HTML_REPORT_NAME + '.html';
            }

            var filePath = htmlReportDirectory + '/' + htmlFileName;

            if (typeof process.env.HTML_REPORT_PATH !== 'undefined') {
                filePath = process.env.HTML_REPORT_PATH + ('/' + htmlFileName);
            }
            utils.saveContentToFile(this, filePath, htmlContent);
        },

        /* #region XML report functions*/

        _renderErrors_XML: function _renderErrors_XML(errs) {
            var _this3 = this;

            this.report_XML += this.indentString('<failure>\n', 4);
            this.report_XML += this.indentString('<![CDATA[', 4);

            errs.forEach(function (err, idx) {

                err = _this3.formatError(err, idx + 1 + ') ').replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');

                _this3.report_XML += '\n';
                _this3.report_XML += _this3.indentString(err, 6);
                _this3.report_XML += '\n';
            });

            this.report_XML += this.indentString(']]>\n', 4);
            this.report_XML += this.indentString('</failure>\n', 4);
        },

        reportTestDone_XML: function reportTestDone_XML(name, testRunInfo) {
            var isFailed = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

            var hasErr = !!testRunInfo.errs.length;

            if (testRunInfo.unstable) name += ' (unstable)';

            if (testRunInfo.screenshotPath) name += ' (screenshots: ' + testRunInfo.screenshotPath + ')';

            name = this.escapeHtml(name);

            var openTag = '<testcase classname="" ' + ('name="' + this.currentFixtureName + ' - ' + name + '" time="' + testRunInfo.durationMs / 1000 + '">\n');

            this.report_XML += this.indentString(openTag, 2);

            if (testRunInfo.skipped) {
                this.skipped_XML++;
                this.report_XML += this.indentString('<skipped/>\n', 4);
            } else if (hasErr) {
                if (isFailed) this._renderErrors_XML(testRunInfo.errs);
            }

            this.report_XML += this.indentString('</testcase>\n', 2);
        },

        _renderWarnings_XML: function _renderWarnings_XML(warnings) {
            var _this4 = this;

            this.setIndent(2).write('<system-out>').newline().write('<![CDATA[').newline().setIndent(4).write('Warnings (' + warnings.length + '):').newline();

            warnings.forEach(function (msg) {
                _this4.setIndent(4).write('--').newline().setIndent(0).write(_this4.indentString(msg, 6)).newline();
            });

            this.setIndent(2).write(']]>').newline().write('</system-out>').newline();
        },

        generateXMLReport: function generateXMLReport(endTime, xmlFileName, actualFailureCount) {

            var name = 'TestCafe Tests: ' + this.escapeHtml(this.uaList_XML);
            //var failures = actualFailureCount;
            var time = (endTime - this.startTime_XML) / 1000;
            var xmlContent = '';
            xmlContent += '<?xml version="1.0" encoding="UTF-8" ?>\n                <testsuite name="' + name + '" tests="' + this.testCount_XML + '" failures="' + actualFailureCount + '" skipped="' + this.skipped_XML + '"' + (' errors="' + actualFailureCount + '" time="' + time + '" timestamp="' + endTime.toUTCString() + '" >\n               ' + this.report_XML + '\n               </testsuite>');

            var xmlFileDirectory = process.env.HTML_REPORT_PATH || __dirname + '../../../../test-reports';

            // Create directory if not exist
            utils.createDirectoryIfNotExist(xmlFileDirectory);

            var xmlFilePath = xmlFileDirectory + '/' + xmlFileName + '.xml';

            utils.saveContentToFile(this, xmlFilePath, xmlContent);
        }
        /* #region XML functions*/

    };
};

module.exports = exports['default'];
// split the Test Description